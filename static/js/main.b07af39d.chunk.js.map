{"version":3,"sources":["components/main.js","api/index.js","App.js","serviceWorker.js","index.js"],"names":["Main","gidenToplam","this","props","attributes","yollanan","wireBedeli","coinbasedenAlinan","coinbaseKomisyon","coinbaseFiyat","paribudanGelen","paribuKomisyon","paribuFiyat","kur","react_default","a","createElement","title","toFixed","Component","fetchParam","localStorage","setItem","fetchApi","fetch","then","res","json","jsonData","console","log","BTC_TL","highestBid","lowestAsk","ETH_TL","LTC_TL","bid","ask","getData","type","getItem","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","clear","onClick","setAll","setApi","setParam","main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNA8CeA,mLA1CX,IAAMC,GACHC,KAAKC,MAAMC,WAAWC,UAAYH,KAAKC,MAAMC,WAAWE,WAIrDC,GAFJN,EACCA,EAAcC,KAAKC,MAAMC,WAAWI,iBAAoB,KAEjCN,KAAKC,MAAMC,WAAWK,cAI1CC,GAFJH,EACCA,EAAoBL,KAAKC,MAAMC,WAAWO,eAAkB,KACrBT,KAAKC,MAAMC,WAAWQ,YAC1DC,EAAMH,EAAiBR,KAAKC,MAAMC,WAAWC,SACnD,OACES,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAId,KAAKC,MAAMc,OACfH,EAAAC,EAAAC,cAAA,WAFF,cAGcd,KAAKC,MAAMC,WAAWC,SAClCS,EAAAC,EAAAC,cAAA,WAJF,iBAKiBd,KAAKC,MAAMC,WAAWE,WACrCQ,EAAAC,EAAAC,cAAA,WANF,sBAOsBd,KAAKC,MAAMC,WAAWI,iBAP5C,IAQEM,EAAAC,EAAAC,cAAA,WARF,oBASoBd,KAAKC,MAAMC,WAAWO,eAT1C,IAUEG,EAAAC,EAAAC,cAAA,WAVF,oBAWoBd,KAAKC,MAAMC,WAAWK,cACxCK,EAAAC,EAAAC,cAAA,WAZF,uBAakBd,KAAKC,MAAMC,WAAWQ,YACtCE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAfF,kBAgBkBf,EAChBa,EAAAC,EAAAC,cAAA,WAjBF,uBAkBuBT,EAAkBW,QAAQ,GAC/CJ,EAAAC,EAAAC,cAAA,WAnBF,0BAoBqBN,EAAeQ,QAAQ,GAC1CJ,EAAAC,EAAAC,cAAA,WArBF,SAsBSH,EAAIK,QAAQ,GACnBJ,EAAAC,EAAAC,cAAA,mBAtCWG,mBCFZ,SAASC,IACdC,aAAaC,QAAQ,WAAY,MACjCD,aAAaC,QAAQ,aAAc,KACnCD,aAAaC,QAAQ,mBAAoB,GACzCD,aAAaC,QAAQ,iBAAkB,KAGlC,SAASC,IACdC,MAAM,qEACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZP,aAAaC,QAAQ,eAAgBM,EAASG,OAAOC,YACrDX,aAAaC,QAAQ,eAAgBM,EAASG,OAAOE,WACrDZ,aAAaC,QAAQ,eAAgBM,EAASM,OAAOF,YACrDX,aAAaC,QAAQ,eAAgBM,EAASM,OAAOD,WACrDZ,aAAaC,QAAQ,eAAgBM,EAASO,OAAOH,YACrDX,aAAaC,QAAQ,eAAgBM,EAASO,OAAOF,aAGzDT,MAAM,wDACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJP,aAAaC,QAAQ,iBAAkBM,EAASQ,KAChDf,aAAaC,QAAQ,iBAAkBM,EAASS,OAEpDb,MAAM,wDACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJP,aAAaC,QAAQ,iBAAkBM,EAASQ,KAChDf,aAAaC,QAAQ,iBAAkBM,EAASS,OAEpDb,MAAM,wDACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJP,aAAaC,QAAQ,iBAAkBM,EAASQ,KAChDf,aAAaC,QAAQ,iBAAkBM,EAASS,OAI/C,SAASC,EAAQC,GACtB,MAAO,CACLlC,SAAUgB,aAAamB,QAAQ,YAC/BlC,WAAYe,aAAamB,QAAQ,cACjChC,iBAAkBa,aAAamB,QAAQ,oBACvC7B,eAAgBU,aAAamB,QAAQ,kBACrC5B,YAAaS,aAAamB,QAAQ,SAAWD,EAAO,OACpD9B,cAAeY,aAAamB,QAAQ,WAAaD,EAAO,YCJ7CE,cArCb,SAAAA,EAAYtC,GAAQ,OAAAuC,OAAAC,EAAA,EAAAD,CAAAxC,KAAAuC,GAAAC,OAAAE,EAAA,EAAAF,CAAAxC,KAAAwC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA5C,KACZC,yEAINkB,aAAa0B,yCAIb3B,IACAG,uCAIAH,qCAIAG,qCAIA,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQgC,QAAS9C,KAAK6C,OAAtB,SACAjC,EAAAC,EAAAC,cAAA,UAAQgC,QAAS9C,KAAK+C,QAAtB,WACAnC,EAAAC,EAAAC,cAAA,UAAQgC,QAAS9C,KAAKgD,QAAtB,WACApC,EAAAC,EAAAC,cAAA,UAAQgC,QAAS9C,KAAKiD,UAAtB,aACArC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACoC,EAAD,CAAMhD,WAAYkC,EAAQ,OAAQrB,MAAM,QACxCH,EAAAC,EAAAC,cAACoC,EAAD,CAAMhD,WAAYkC,EAAQ,OAAQrB,MAAM,QACxCH,EAAAC,EAAAC,cAACoC,EAAD,CAAMhD,WAAYkC,EAAQ,OAAQrB,MAAM,gBAhC/BE,aCOEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.b07af39d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Main extends Component {\n  render() {\n    const gidenToplam =\n      +this.props.attributes.yollanan - +this.props.attributes.wireBedeli;\n    const coinbasedenKomisyonlu =\n      gidenToplam -\n      (gidenToplam * this.props.attributes.coinbaseKomisyon) / 100;\n    const coinbasedenAlinan =\n      coinbasedenKomisyonlu / this.props.attributes.coinbaseFiyat;\n    const paribuKomisyonlu =\n      coinbasedenAlinan -\n      (coinbasedenAlinan * this.props.attributes.paribuKomisyon) / 100;\n    const paribudanGelen = paribuKomisyonlu * this.props.attributes.paribuFiyat;\n    const kur = paribudanGelen / this.props.attributes.yollanan;\n    return (\n      <div>\n        <b>{this.props.title}</b>\n        <br />\n        Yollanan: ${this.props.attributes.yollanan}\n        <br />\n        Wire Bedeli: ${this.props.attributes.wireBedeli}\n        <br />\n        Coinbase Komisyon: {this.props.attributes.coinbaseKomisyon}%\n        <br />\n        Paribu Komisyon: {this.props.attributes.paribuKomisyon}%\n        <br />\n        Coinbase Fiyat: ${this.props.attributes.coinbaseFiyat}\n        <br />\n        Paribu Fiyat: ₺{this.props.attributes.paribuFiyat}\n        <br />\n        <br />\n        Giden Toplam: ${gidenToplam}\n        <br />\n        Coinbaseden Alinan: {coinbasedenAlinan.toFixed(3)}\n        <br />\n        Paribudan Gelen: ₺{paribudanGelen.toFixed(2)}\n        <br />\n        Kur: ${kur.toFixed(3)}\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","export function fetchParam() {\n  localStorage.setItem(\"yollanan\", 25000);\n  localStorage.setItem(\"wireBedeli\", 100);\n  localStorage.setItem(\"coinbaseKomisyon\", 0);\n  localStorage.setItem(\"paribuKomisyon\", 0.15);\n}\n\nexport function fetchApi() {\n  fetch(\"https://cors-anywhere.herokuapp.com/https://www.paribu.com/ticker\")\n    .then(res => res.json())\n    .then(jsonData => {\n      console.log(jsonData);\n      localStorage.setItem(\"paribuBtcBid\", jsonData.BTC_TL.highestBid);\n      localStorage.setItem(\"paribuBtcAsk\", jsonData.BTC_TL.lowestAsk);\n      localStorage.setItem(\"paribuEthBid\", jsonData.ETH_TL.highestBid);\n      localStorage.setItem(\"paribuEthAsk\", jsonData.ETH_TL.lowestAsk);\n      localStorage.setItem(\"paribuLtcBid\", jsonData.LTC_TL.highestBid);\n      localStorage.setItem(\"paribuLtcAsk\", jsonData.LTC_TL.lowestAsk);\n    });\n\n  fetch(\"https://api.pro.coinbase.com/products/BTC-USD/ticker\")\n    .then(res => res.json())\n    .then(jsonData => {\n      localStorage.setItem(\"coinbaseBtcBid\", jsonData.bid);\n      localStorage.setItem(\"coinbaseBtcAsk\", jsonData.ask);\n    });\n  fetch(\"https://api.pro.coinbase.com/products/ETH-USD/ticker\")\n    .then(res => res.json())\n    .then(jsonData => {\n      localStorage.setItem(\"coinbaseEthBid\", jsonData.bid);\n      localStorage.setItem(\"coinbaseEthAsk\", jsonData.ask);\n    });\n  fetch(\"https://api.pro.coinbase.com/products/LTC-USD/ticker\")\n    .then(res => res.json())\n    .then(jsonData => {\n      localStorage.setItem(\"coinbaseLtcBid\", jsonData.bid);\n      localStorage.setItem(\"coinbaseLtcAsk\", jsonData.ask);\n    });\n}\n\nexport function getData(type) {\n  return {\n    yollanan: localStorage.getItem(\"yollanan\"),\n    wireBedeli: localStorage.getItem(\"wireBedeli\"),\n    coinbaseKomisyon: localStorage.getItem(\"coinbaseKomisyon\"),\n    paribuKomisyon: localStorage.getItem(\"paribuKomisyon\"),\n    paribuFiyat: localStorage.getItem(\"paribu\" + type + \"Bid\"),\n    coinbaseFiyat: localStorage.getItem(\"coinbase\" + type + \"Ask\")\n  };\n}\n","import React, { Component } from \"react\";\nimport Main from \"./components/main\";\nimport \"./App.css\";\nimport { fetchApi, fetchParam, getData } from \"./api\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  clear() {\n    localStorage.clear();\n  }\n\n  setAll() {\n    fetchParam();\n    fetchApi();\n  }\n\n  setParam() {\n    fetchParam();\n  }\n\n  setApi() {\n    fetchApi();\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.clear}>CLEAR</button>\n        <button onClick={this.setAll}>SET_ALL</button>\n        <button onClick={this.setApi}>SET_API</button>\n        <button onClick={this.setParam}>SET_PARAM</button>\n        <br />\n        {<Main attributes={getData(\"Btc\")} title=\"Btc\" />}\n        {<Main attributes={getData(\"Eth\")} title=\"Eth\" />}\n        {<Main attributes={getData(\"Ltc\")} title=\"Ltc\" />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}